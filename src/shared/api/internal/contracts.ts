/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * YouTogether API
 * This is CRUD API documentation for you-together-online project.
You can get more info about that project [here](https://github.com/youtogether-online)
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

/**
 * Returns user session data from cookie session
 * @summary Returns authorized user session data
 */
export const getAuthSessionResponseFirstNameMin = 3;
export const getAuthSessionResponseFirstNameMax = 32;
export const getAuthSessionResponseLastNameMin = 3;
export const getAuthSessionResponseLastNameMax = 32;
export const getAuthSessionResponseEmailRegExp = new RegExp("^S+@S+.S+$");

export const getAuthSessionResponse = zod.object({
  name: zod.string(),
  firstName: zod
    .string()
    .min(getAuthSessionResponseFirstNameMin)
    .max(getAuthSessionResponseFirstNameMax)
    .optional(),
  lastName: zod
    .string()
    .min(getAuthSessionResponseLastNameMin)
    .max(getAuthSessionResponseLastNameMax)
    .optional(),
  role: zod.enum(["USER", "ADMIN"]),
  email: zod.string().regex(getAuthSessionResponseEmailRegExp).optional(),
  language: zod.enum(["EN", "RU"]),
  theme: zod.enum(["DARK", "LIGHT", "SYSTEM"]),
  isEmailVerified: zod.boolean(),
});

/**
 * Authorize user with code that previously was sent to email. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
 * @summary Authorization via email
 */
export const postAuthEmailHeader = zod.object({
  "Accept-Language": zod.enum(["EN", "RU"]).optional(),
});

export const postAuthEmailBodyEmailRegExp = new RegExp("^S+@S+.S+$");
export const postAuthEmailBodyCodeMin = 5;
export const postAuthEmailBodyCodeMax = 5;

export const postAuthEmailBody = zod.object({
  email: zod.string().regex(postAuthEmailBodyEmailRegExp),
  code: zod.string().min(postAuthEmailBodyCodeMin).max(postAuthEmailBodyCodeMax),
});

/**
 * Authorize user with email and password. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
 * @summary Authorization via email with password
 */
export const postAuthPasswordHeader = zod.object({
  "Accept-Language": zod.enum(["EN", "RU"]).optional(),
});

export const postAuthPasswordBodyEmailRegExp = new RegExp("^S+@S+.S+$");
export const postAuthPasswordBodyPasswordRegExp = new RegExp("^P{Cc}P{Cn}P{Cs}$");

export const postAuthPasswordBody = zod.object({
  email: zod.string().regex(postAuthPasswordBodyEmailRegExp),
  password: zod.string().regex(postAuthPasswordBodyPasswordRegExp),
});

/**
 * Generates 5-digit string, saves it and sends it to specified email
 * @summary Send secret authorization code to specified email
 */
export const postEmailSendCodeBodyEmailRegExp = new RegExp("^S+@S+.S+$");

export const postEmailSendCodeBody = zod.object({
  email: zod.string().regex(postEmailSendCodeBodyEmailRegExp),
});

/**
 * Returns user's main data by username, if exist
 * @summary Get user main info by username
 */
export const getUserNameParams = zod.object({
  name: zod.string(),
});

export const getUserNameResponseFirstNameMin = 3;
export const getUserNameResponseFirstNameMax = 32;
export const getUserNameResponseLastNameMin = 3;
export const getUserNameResponseLastNameMax = 32;
export const getUserNameResponseBiographyMin = 1;
export const getUserNameResponseBiographyMax = 140;

export const getUserNameResponse = zod.object({
  name: zod.string(),
  firstName: zod
    .string()
    .min(getUserNameResponseFirstNameMin)
    .max(getUserNameResponseFirstNameMax)
    .optional(),
  lastName: zod
    .string()
    .min(getUserNameResponseLastNameMin)
    .max(getUserNameResponseLastNameMax)
    .optional(),
  role: zod.enum(["USER", "ADMIN"]),
  biography: zod
    .string()
    .min(getUserNameResponseBiographyMin)
    .max(getUserNameResponseBiographyMax)
    .optional(),
});

/**
 * Checks specified name on already exist
 * @summary Check name on name already used
 */
export const getUserCheckNameNameParams = zod.object({
  name: zod.string(),
});

/**
 * Updates some user's main data
 * @summary Update user's main data
 */
export const patchUserBodyFirstNameMin = 3;
export const patchUserBodyFirstNameMax = 32;
export const patchUserBodyLastNameMin = 3;
export const patchUserBodyLastNameMax = 32;
export const patchUserBodyBiographyMin = 1;
export const patchUserBodyBiographyMax = 140;

export const patchUserBody = zod.object({
  firstName: zod.string().min(patchUserBodyFirstNameMin).max(patchUserBodyFirstNameMax).optional(),
  lastName: zod.string().min(patchUserBodyLastNameMin).max(patchUserBodyLastNameMax).optional(),
  biography: zod.string().min(patchUserBodyBiographyMin).max(patchUserBodyBiographyMax).optional(),
  theme: zod.enum(["DARK", "LIGHT", "SYSTEM"]).optional(),
  language: zod.enum(["EN", "RU"]).optional(),
});

/**
 * Updates user's password by email
 * @summary Update user's password
 */
export const patchUserPasswordBodyOldPasswordRegExp = new RegExp("^P{Cc}P{Cn}P{Cs}$");
export const patchUserPasswordBodyNewPasswordRegExp = new RegExp("^P{Cc}P{Cn}P{Cs}$");

export const patchUserPasswordBody = zod.object({
  oldPassword: zod.string().regex(patchUserPasswordBodyOldPasswordRegExp),
  newPassword: zod.string().regex(patchUserPasswordBodyNewPasswordRegExp),
});

/**
 * Updates user's email by password
 * @summary Update user's email
 */
export const patchUserEmailBodyNewEmailRegExp = new RegExp("^S+@S+.S+$");
export const patchUserEmailBodyPasswordRegExp = new RegExp("^P{Cc}P{Cn}P{Cs}$");

export const patchUserEmailBody = zod.object({
  newEmail: zod.string().regex(patchUserEmailBodyNewEmailRegExp),
  password: zod.string().regex(patchUserEmailBodyPasswordRegExp),
});

/**
 * Updates user name
 * @summary Update user name
 */
export const patchUserNameBodyNameMin = 5;
export const patchUserNameBodyNameMax = 20;
export const patchUserNameBodyNameRegExp = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$");

export const patchUserNameBody = zod.object({
  name: zod
    .string()
    .min(patchUserNameBodyNameMin)
    .max(patchUserNameBodyNameMax)
    .regex(patchUserNameBodyNameRegExp),
});
