/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * YouTogether API
 * This is CRUD API documentation for you-together-online project.
You can get more info about that project [here](https://github.com/youtogether-online)
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

/**
 * Returns user session data from cookie session
 * @summary Returns authorized user session data
 */
export const getAuthSessionResponseNameMin = 5;
export const getAuthSessionResponseNameMax = 20;
export const getAuthSessionResponseNameRegExp = new RegExp(
  "^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$",
);
export const getAuthSessionResponseFirstNameMin = 3;
export const getAuthSessionResponseFirstNameMax = 32;
export const getAuthSessionResponseLastNameMin = 3;
export const getAuthSessionResponseLastNameMax = 32;
export const getAuthSessionResponseBiographyMin = 1;
export const getAuthSessionResponseBiographyMax = 140;

export const getAuthSessionResponse = zod.object({
  name: zod
    .string()
    .min(getAuthSessionResponseNameMin)
    .max(getAuthSessionResponseNameMax)
    .regex(getAuthSessionResponseNameRegExp),
  email: zod.string().email(),
  role: zod.enum(["user", "admin"]),
  friendsIds: zod.array(zod.number()).optional(),
  language: zod.enum(["en", "ru"]),
  theme: zod.enum(["dark", "light", "system"]),
  firstName: zod
    .string()
    .min(getAuthSessionResponseFirstNameMin)
    .max(getAuthSessionResponseFirstNameMax)
    .optional(),
  lastName: zod
    .string()
    .min(getAuthSessionResponseLastNameMin)
    .max(getAuthSessionResponseLastNameMax)
    .optional(),
  biography: zod
    .string()
    .min(getAuthSessionResponseBiographyMin)
    .max(getAuthSessionResponseBiographyMax)
    .optional(),
  createTime: zod.string().datetime(),
  isEmailVerified: zod.boolean(),
});

/**
 * Authorize user with code that previously was sent to email. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
 * @summary Authorization via email
 */
export const postAuthEmailHeader = zod.object({
  "Accept-Language": zod.enum(["EN", "RU"]).optional(),
});

export const postAuthEmailBodyCodeMin = 5;
export const postAuthEmailBodyCodeMax = 5;

export const postAuthEmailBody = zod.object({
  email: zod.string().email(),
  code: zod.string().min(postAuthEmailBodyCodeMin).max(postAuthEmailBodyCodeMax),
});

/**
 * Authorize user with email and password. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
 * @summary Authorization via email with password
 */
export const postAuthPasswordHeader = zod.object({
  "Accept-Language": zod.enum(["EN", "RU"]).optional(),
});

export const postAuthPasswordBodyPasswordRegExp = new RegExp("^w{4,20}$");

export const postAuthPasswordBody = zod.object({
  email: zod.string().email(),
  password: zod.string().regex(postAuthPasswordBodyPasswordRegExp),
});

/**
 * Generates 5-digit string, saves it and sends it to specified email
 * @summary Send secret authorization code to specified email
 */
export const postEmailSendCodeBody = zod.object({
  email: zod.string().email(),
});

/**
 * Returns user's main data by username, if exist
 * @summary Get user main info by username
 */
export const getUserNamePathNameMin = 5;
export const getUserNamePathNameMax = 20;
export const getUserNamePathNameRegExp = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$");

export const getUserNameParams = zod.object({
  name: zod
    .string()
    .min(getUserNamePathNameMin)
    .max(getUserNamePathNameMax)
    .regex(getUserNamePathNameRegExp),
});

export const getUserNameResponseNameMin = 5;
export const getUserNameResponseNameMax = 20;
export const getUserNameResponseNameRegExp = new RegExp(
  "^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$",
);
export const getUserNameResponseBiographyMin = 1;
export const getUserNameResponseBiographyMax = 140;
export const getUserNameResponseFirstNameMin = 3;
export const getUserNameResponseFirstNameMax = 32;
export const getUserNameResponseLastNameMin = 3;
export const getUserNameResponseLastNameMax = 32;

export const getUserNameResponse = zod.object({
  name: zod
    .string()
    .min(getUserNameResponseNameMin)
    .max(getUserNameResponseNameMax)
    .regex(getUserNameResponseNameRegExp),
  biography: zod
    .string()
    .min(getUserNameResponseBiographyMin)
    .max(getUserNameResponseBiographyMax)
    .optional(),
  role: zod.enum(["user", "admin"]),
  friendsIds: zod.array(zod.number()),
  firstName: zod
    .string()
    .min(getUserNameResponseFirstNameMin)
    .max(getUserNameResponseFirstNameMax)
    .optional(),
  lastName: zod
    .string()
    .min(getUserNameResponseLastNameMin)
    .max(getUserNameResponseLastNameMax)
    .optional(),
  createTime: zod.string().datetime(),
});

/**
 * Checks specified name on already exist
 * @summary Check name on name already used
 */
export const getUserCheckNameNamePathNameMin = 5;
export const getUserCheckNameNamePathNameMax = 20;
export const getUserCheckNameNamePathNameRegExp = new RegExp(
  "^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$",
);

export const getUserCheckNameNameParams = zod.object({
  name: zod
    .string()
    .min(getUserCheckNameNamePathNameMin)
    .max(getUserCheckNameNamePathNameMax)
    .regex(getUserCheckNameNamePathNameRegExp),
});

/**
 * Updates some user's main data
 * @summary Update user's main data
 */
export const patchUserBodyFirstNameMin = 3;
export const patchUserBodyFirstNameMax = 32;
export const patchUserBodyLastNameMin = 3;
export const patchUserBodyLastNameMax = 32;
export const patchUserBodyBiographyMin = 1;
export const patchUserBodyBiographyMax = 140;

export const patchUserBody = zod.object({
  firstName: zod.string().min(patchUserBodyFirstNameMin).max(patchUserBodyFirstNameMax).optional(),
  lastName: zod.string().min(patchUserBodyLastNameMin).max(patchUserBodyLastNameMax).optional(),
  biography: zod.string().min(patchUserBodyBiographyMin).max(patchUserBodyBiographyMax).optional(),
  theme: zod.enum(["dark", "light", "system"]).optional(),
  language: zod.enum(["en", "ru"]).optional(),
});

/**
 * Updates user's password by email
 * @summary Update user's password
 */
export const patchUserPasswordBodyOldPasswordRegExp = new RegExp("^w{4,20}$");
export const patchUserPasswordBodyNewPasswordRegExp = new RegExp("^w{4,20}$");

export const patchUserPasswordBody = zod.object({
  oldPassword: zod.string().regex(patchUserPasswordBodyOldPasswordRegExp),
  newPassword: zod.string().regex(patchUserPasswordBodyNewPasswordRegExp),
});

/**
 * Updates user's email by password
 * @summary Update user's email
 */
export const patchUserEmailBodyPasswordRegExp = new RegExp("^w{4,20}$");

export const patchUserEmailBody = zod.object({
  newEmail: zod.string().email(),
  password: zod.string().regex(patchUserEmailBodyPasswordRegExp),
});

/**
 * Updates user name
 * @summary Update user name
 */
export const patchUserNameBodyNameMin = 5;
export const patchUserNameBodyNameMax = 20;
export const patchUserNameBodyNameRegExp = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$");

export const patchUserNameBody = zod.object({
  name: zod
    .string()
    .min(patchUserNameBodyNameMin)
    .max(patchUserNameBodyNameMax)
    .regex(patchUserNameBodyNameRegExp),
});

/**
 * Creates (or updates, if exists) the room. Room created once, after first account query.
 * @summary Upsert user's room, and connect to it
 */
export const putRoomBodyTitleMin = 5;
export const putRoomBodyTitleMax = 20;
export const putRoomBodyTitleRegExp = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$");
export const putRoomBodyDescriptionMin = 1;
export const putRoomBodyDescriptionMax = 140;
export const putRoomBodyPasswordRegExp = new RegExp("^w{4,20}$");

export const putRoomBody = zod.object({
  title: zod
    .string()
    .min(putRoomBodyTitleMin)
    .max(putRoomBodyTitleMax)
    .regex(putRoomBodyTitleRegExp)
    .optional(),
  privacy: zod.enum(["public", "private", "friends"]).optional(),
  description: zod
    .string()
    .min(putRoomBodyDescriptionMin)
    .max(putRoomBodyDescriptionMax)
    .optional(),
  password: zod.string().regex(putRoomBodyPasswordRegExp).optional(),
});

/**
 * Open web socket connection to user's room
 * @summary Connect to user's room by websocket
 */
export const getRoomNamePathNameMin = 5;
export const getRoomNamePathNameMax = 20;
export const getRoomNamePathNameRegExp = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{3,18}([a-zA-Z0-9])$");

export const getRoomNameParams = zod.object({
  name: zod
    .string()
    .min(getRoomNamePathNameMin)
    .max(getRoomNamePathNameMax)
    .regex(getRoomNamePathNameRegExp),
});
